name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml', '**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f pyproject.toml ]; then
          pip install poetry
          poetry install --with dev
        elif [ -f requirements-dev.txt ]; then
          pip install -r requirements-dev.txt
        elif [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        if [ -f pyproject.toml ]; then pip install -e .; fi

    - name: Install linting tools
      run: |
        pip install black isort flake8 mypy coverage

    - name: Run linting
      run: |
        black --check --diff src/ tests/
        isort --check-only --diff --profile black src/ tests/
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        mypy src/ --ignore-missing-imports

    - name: Run tests with coverage
      run: |
        python -m pytest --version
        coverage run -m pytest tests/ -v --tb=short
        coverage report --fail-under=80
        coverage xml

    - name: Test CLI commands
      run: |
        python -c "from engine_core import EngineCore; print('EngineCore import successful')"
        python -c "from engine_core.models import Agent, Workflow; print('Models import successful')"
        python -c "from engine_core.services import WorkflowService; print('Services import successful')"
        python -c "from engine_core.workflows import WorkflowEngine; print('Workflows import successful')"

    - name: Test contract compliance
      run: |
        python -c "
        from engine_core.models.agent import AgentBuilder
        from engine_core.models.workflow import WorkflowBuilder
        from engine_core.workflows.workflow_engine import WorkflowEngine

        # Test AgentBuilder contract
        agent = AgentBuilder().with_id('test').with_model('claude-3.5-sonnet').build()
        print('✅ AgentBuilder contract works')

        # Test WorkflowBuilder contract
        workflow = WorkflowBuilder().with_id('test').add_vertex('task1', agent='test').build()
        print('✅ WorkflowBuilder contract works')

        print('✅ All core contracts validated')
        "

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Run security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json > safety-report.json || true

  docker:
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/engine-framework/${{ github.event.repository.name }}:latest
          ghcr.io/engine-framework/${{ github.event.repository.name }}:${{ github.sha }}
        platforms: linux/amd64,linux/arm64
